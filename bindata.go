package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _include_cmd_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xc1\x6e\xdb\x30\x0c\x3d\x5b\x5f\xc1\xa9\x6a\xd1\x1e\x0c\x2f\xc1\x4e\x2e\x32\xb4\xd8\x76\xdb\x76\xe9\xb1\x4e\x01\xd5\x96\x6b\x23\x8a\x1c\x58\x4e\xda\x21\xf5\xbf\x8f\x94\x25\xd7\x6e\xb3\xcb\x2e\x71\x44\x52\x7c\xe4\xe3\xa3\xce\xe0\x16\x74\xfd\x54\x75\xcf\x8a\x7e\xc1\xee\x1f\xf3\x66\xbb\x95\xa6\x80\xb2\x95\x5b\xf5\xdc\xb4\x1b\xc6\x0a\x95\x6b\xd9\x2a\x88\x6f\xe1\xdb\xaf\xef\x77\x8c\xe5\xdb\x22\xd6\xb5\xed\x2e\xaf\xe0\xc8\xa2\xe0\x2e\x94\xcd\x57\xfc\x27\xda\x2d\xc8\x83\xac\xb5\x7c\xd4\x0a\x7c\x3e\xcb\xdf\x02\x8d\x5d\x71\xb1\x40\x43\xc8\x13\x6f\xd4\x1f\x0b\x5c\x18\xcb\xe1\x15\xac\x2a\x80\xdb\x04\x4f\x69\x92\x70\xd6\xbf\xe1\xb9\xb8\x39\xe8\x98\xab\x6c\x5a\xd8\x40\x6d\x30\xcd\xf1\x13\x95\x79\x7f\xb3\xee\xf9\x35\x14\x0d\x8b\x22\x95\x57\x0d\x3a\x36\x54\x44\x63\x14\x82\x3c\xb5\x6a\x07\xfc\x81\x40\x1c\x66\xd3\x76\x33\x24\xe3\x71\xfe\x27\x6d\x7c\x80\xf4\x5d\x4e\xf5\xb2\xc3\xd3\x29\xbe\x7e\x38\x0f\x32\x06\xe5\xde\xe4\x5d\xdd\x18\x90\x74\xf2\xbc\x4d\x68\x2b\x8d\x6b\x15\xdd\xf8\x3d\x2e\xd3\x58\x2c\x7a\x74\xeb\x26\x97\xda\xf1\xe0\x59\x30\x54\xae\xb8\x9c\xb4\x72\x35\xaf\xb7\x34\x7c\xca\x40\xcc\xe1\xe2\x2b\x24\x85\x3a\x24\x66\xaf\x35\x5c\x5c\x0c\xac\x1a\xdf\x16\x8b\x5c\xdf\x34\x9e\x54\x1c\xa5\x4d\xce\xf0\x5f\x9c\xf4\x7c\xbd\x72\xb9\xe6\x3d\x8e\xcc\xbd\x9b\x90\x6f\x57\x2c\x31\xab\x3a\x60\xc5\x68\xa4\x40\xc0\xba\x66\x8c\x64\x5c\xd0\x37\xc3\x38\x27\x10\x63\x41\x2c\x20\xe3\x99\xb8\xc9\x90\x78\x16\xf5\x5e\x39\x03\x1e\x0c\xe3\xf7\x25\x2e\x5c\x51\x8b\xb1\xa6\x50\xcc\x1b\x49\xe8\xbc\x06\x5b\xd5\x65\x07\xc1\x8c\x81\x33\xfb\xeb\x2b\x74\xed\x5e\x05\xb7\xed\x64\xb7\xb7\xab\xcf\x2c\xaa\x4b\x08\xac\x8e\x6a\x75\x34\x3e\x08\xb4\x67\x62\xc6\xe3\x35\x74\x95\x32\xd8\x84\x38\x4e\xf8\xc3\x38\xbe\xee\xf1\xf6\x0d\xf1\xa0\x2d\xa2\x50\xda\xfb\x7b\x34\x91\x0f\xd6\xeb\xf1\xa2\x9f\xd7\xef\x06\xf7\x32\xaf\x82\x22\x52\x70\x81\xe4\xf7\x95\x2d\x69\xb4\x3a\x64\xa1\xb2\x3e\x26\x11\x97\xa5\x89\x89\xd7\x21\xe2\x8a\xee\x97\xb5\xd7\xc4\x28\x8d\xdb\x0f\x6b\x9b\xba\x40\x54\x15\x62\xce\x75\xe5\x13\x79\x69\x45\xbb\xb6\x36\x5d\x09\x1c\xe0\x3c\x5e\x7e\xb1\x70\x6e\x33\x94\x99\x6f\x6a\x06\xff\x91\x8e\xa1\x1c\x07\x43\x2f\xd0\x09\x24\x8a\x1b\xa1\x26\x58\xef\xd1\x86\xeb\xff\x00\x44\x4f\x1a\x22\x46\xd0\x41\xe1\xe1\x13\xd8\x78\xa9\x3b\x10\x03\xbd\x8c\x78\xf2\x72\xaa\x94\xde\x9d\x5a\xe2\xbb\xaa\x79\xb6\x40\x5e\xac\x1c\xdb\xd8\x4a\xb7\xc8\xd4\xd0\xa9\x4d\x96\xed\x13\x29\x91\x24\x10\xa6\x46\xa6\xc9\xdc\xa8\xb3\x40\x3b\xb5\xed\x04\x49\x7f\xf0\x95\x39\x03\x2d\x91\x14\xbc\x31\x84\x4d\xb4\x7d\xa4\x34\xc9\x39\x75\x9a\xd0\x2b\x35\x18\x0d\x9a\x60\x7e\x86\x24\xc6\x35\x9a\x5c\x77\x8f\xcb\x89\xc9\xf8\x4a\x4c\x4c\x7d\xf9\xb7\x63\x31\x2a\xd7\xef\xa7\x7b\x79\x88\xa4\xc9\x5a\x06\xba\x1c\x2b\xec\x6f\x00\x00\x00\xff\xff\x30\x4f\x27\x2e\x69\x06\x00\x00")

func include_cmd_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_cmd_bash,
		"include/cmd.bash",
	)
}

func include_cmd_bash() (*asset, error) {
	bytes, err := include_cmd_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/cmd.bash", size: 1641, mode: os.FileMode(420), modTime: time.Unix(1422823337, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_deps_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x61\x4f\xeb\x36\x14\xfd\xdc\xfc\x8a\x8b\x5b\xbd\x47\xd0\x4b\xa2\xbd\x6d\x4f\x53\xa0\x4c\x93\x80\x8d\x2f\x03\x01\x93\x26\x21\x40\xae\xe3\xa6\x16\xb1\x9b\xd9\x4e\x57\x4a\xf9\xef\xbb\x76\x9c\xd0\x76\x8c\x89\x4f\x4e\xec\x7b\xef\x39\xf7\xdc\x63\x0f\xe1\x5a\xc8\xba\xe2\x30\x11\x8a\xea\x27\x28\x78\xcd\x55\xc1\x15\x7b\x02\x49\x15\x2d\xb9\xe4\xca\x46\x51\xc1\x59\x45\x35\x87\x93\xd3\xcb\xeb\x87\xab\xd3\xcb\x8b\x31\x19\x3d\xf7\x3f\x79\x32\xb3\xb6\x36\x79\x96\x69\xfa\x77\x5a\x0a\x3b\x6b\x26\x8d\xe1\x9a\xcd\x95\xc5\xf4\x94\xcd\x65\x56\x56\xa2\xe0\xba\xa2\x13\x13\x3e\xcb\x46\x25\x9a\xb2\xc7\x4c\x52\x63\xb9\xce\x04\xc2\x2e\x5f\x88\xc3\xaa\x4d\x22\x94\xb0\xfb\x31\x3c\x47\x03\xbe\xac\xe7\xda\xc2\xe5\x2f\x37\xbf\x21\xe8\xbe\x3f\x2d\x84\x8e\x33\x64\x9c\x8f\xdc\x36\x89\x5e\x42\x16\xee\x87\x24\x36\x9b\x03\x52\xfc\xf5\x8f\xdf\x1f\xae\x2e\x2e\x6e\xf2\x9f\x5f\xb2\x14\x11\x09\x0c\x61\x26\xe5\x17\xe8\x39\x80\xa9\x39\x13\x53\xc1\xd2\x34\xed\xeb\x68\xfe\x57\x23\x34\x6f\x6b\x75\xbd\x2b\x2a\x39\x32\xf8\x8e\xc0\x82\x6b\x23\xe6\xca\x69\xf0\x35\x4f\x2a\x6a\xb9\xb1\xc8\x7c\xe0\x73\xd9\x8c\xb3\x47\xc4\x76\xe1\x04\xd7\x10\x4c\xe0\xd3\x27\xd0\xdc\x36\x5a\x75\xf4\x0e\xe0\xe4\x55\xed\x00\x59\x7c\x01\xa1\x8c\xa5\x55\x25\x54\x09\xbe\x08\x74\x25\x00\x29\x76\x28\x21\xe8\x0d\x9c\xbe\x09\x4f\xe4\xa3\x2d\xdc\xde\x42\x32\x85\x5d\x9d\xb3\x80\x72\x77\xd7\x57\x0f\x04\x3e\x5a\xbf\x9a\x33\x5a\x81\xa5\x25\xf8\x79\x83\x95\x35\x82\xb8\x65\x2a\xd0\x85\x58\x1a\xdc\x87\xef\x9b\x2f\xd1\x3d\xbe\xf1\x00\x16\x0d\xe4\xa3\x8b\x4e\xea\x7f\x31\xc4\xd2\xbe\xe0\x78\xb4\xcf\x1a\x5d\x41\x62\x30\xa4\x37\x68\xe0\x1f\x47\x03\x44\x76\x2e\x6a\x3c\x40\x62\xe2\xfe\x53\xc2\x1a\x4a\x8d\xf0\x98\xf9\xed\x07\x38\x86\xac\xe0\x8b\x4c\x35\xa8\x31\x0e\xce\x0f\x8c\xca\x02\x4f\xd6\xeb\xf6\xef\xfb\x9f\xbe\xc5\x0e\x75\x0a\x7b\x8e\xb6\xab\x1a\x5c\xe7\x89\x90\xbe\x9e\x80\x84\x03\xb9\xef\xa7\x38\x72\xdd\x93\x9d\xcd\x03\x20\x31\x39\x04\x3b\xe3\x68\x8f\xe0\x8f\xbd\xbd\x4d\x83\xa8\xb9\x45\x1d\x5a\xd9\xf2\x1d\x67\x10\x97\xb3\x14\x16\xbe\x46\x83\xa9\x88\x06\xe7\x67\xd7\xe3\xcf\xf0\x19\x4d\x45\x0b\x58\x80\x05\x27\x89\xf7\x83\x69\x24\x1c\x1d\x1d\x21\x4b\xe4\x8c\x69\xad\xfe\xdb\x17\x0b\xf7\xc8\x96\xd4\x6d\x50\x1b\xed\xa6\xe3\xa6\xda\xee\xb9\x7b\xd5\x6a\x1b\x0d\x3a\xdd\x47\x6e\x3d\x6e\xd3\x5c\x74\x27\x12\x5a\x0b\x61\x18\xb5\x1b\x47\x28\x92\x2c\x7e\x8c\x09\x8c\x71\xb3\x23\xe8\x7c\xf6\xae\x14\x7d\x27\x53\x8a\x45\x8a\x5d\x35\xe0\xb5\xd2\x8e\x2e\xac\xd8\xec\xa6\x33\x9a\xeb\x7e\x42\x4d\x6b\x3a\xe2\xe8\x13\x37\xd9\xde\x7e\xae\xdd\x2e\x76\x38\x3c\x48\x9d\x8f\x19\xc6\x63\x6c\x1f\x43\x70\x30\x08\xb6\x12\x75\x0c\x8d\xc2\x65\xb3\xc9\x0d\x33\x1d\x1e\x62\x94\x2d\x57\x6b\x4b\x75\x5a\xae\x62\xbc\x0a\x28\xf2\x6a\x39\x7d\x27\x9e\x1b\xca\x9c\xbd\xfd\x1d\xf8\x4f\x9f\x91\xfb\x61\x77\x4f\x72\xb4\x17\xda\xd4\xea\x86\x07\x8b\x7a\xed\xc3\xe9\x96\xbc\xde\x29\x79\x70\xca\x03\x18\xa6\x45\x6d\x83\x43\xba\x78\x2f\x62\xfb\x08\x5f\x9d\x9e\x9d\xff\xb9\xe5\x16\x7f\xba\xa0\xee\x25\x6a\x93\xb7\xe8\xe3\x61\xa3\x0c\xef\x32\xb1\x97\xca\x70\xdc\x94\x8b\xcd\x7e\xdf\xb8\xcc\x61\x5a\xc9\x76\x31\x2d\x21\xd1\x4e\xaa\x57\xfb\xfd\xdf\xb3\x8b\x0f\xd6\x3f\x01\x00\x00\xff\xff\x3e\x1d\x29\x9f\xe4\x06\x00\x00")

func include_deps_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_deps_bash,
		"include/deps.bash",
	)
}

func include_deps_bash() (*asset, error) {
	bytes, err := include_deps_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/deps.bash", size: 1764, mode: os.FileMode(420), modTime: time.Unix(1423070000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_env_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\x4a\x49\x4d\xce\x49\x2c\x4a\x55\xd0\x4d\x54\x88\x4f\xcd\x2b\xe3\xe2\x02\x12\xba\xa9\x15\x05\xf9\x45\x25\x1a\x9a\x0a\xd5\x5c\x9c\x30\x05\x65\x89\x45\xb6\x4a\x2a\x86\x4a\x5c\x9c\x20\x75\xda\xb6\x1a\x2a\x40\x11\x4d\xae\x5a\x88\x8e\xe2\x8c\xfc\x72\x88\xfa\xb4\xfc\x22\x90\x5a\x85\xcc\x3c\x05\x25\x95\x6a\x90\xda\x68\x87\xd8\x5a\x25\x6b\x85\x94\x7c\x2e\x4e\xce\xd4\xe4\x8c\x7c\xa0\x38\xc8\x30\x95\x6a\x45\x20\x55\x0b\x34\x30\x25\x3f\x2f\x95\xab\x16\x10\x00\x00\xff\xff\xfd\x25\x23\x79\x8b\x00\x00\x00")

func include_env_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_env_bash,
		"include/env.bash",
	)
}

func include_env_bash() (*asset, error) {
	bytes, err := include_env_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/env.bash", size: 139, mode: os.FileMode(420), modTime: time.Unix(1422810093, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_fn_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x41\x8f\xda\x30\x10\x85\xcf\xf1\xaf\x78\x9a\x5a\x02\x54\x45\x11\x5c\x69\xaa\xaa\x87\x4a\xbd\xf6\x4a\x39\x78\x83\x4d\xac\xcd\x3a\x91\xed\x80\x10\xcb\x7f\xdf\x71\xc8\x42\x0e\x08\xad\x72\xc9\xf8\xbd\x99\xe7\xcf\xf3\x0d\xbf\x55\xa8\x61\x7a\x57\x45\xdb\x3a\x58\x17\x7d\x1b\x3a\x3d\x54\x42\x18\x97\x2b\xbf\x0f\xf3\x05\xce\x22\xdb\xe9\xaa\x51\x5e\x63\xa7\x43\x55\xd2\x5f\x37\xd8\xa0\x6e\xcd\xb3\x00\x36\xf7\x6f\xda\xc5\x40\x22\x6b\xda\x4a\x35\xe9\xa4\xb1\x4e\x97\x72\x1e\x4f\x9d\x86\x5c\xe2\x1d\x7b\xaf\x3b\x7c\x4e\x1b\xcb\xfc\x00\x9a\x06\x10\x0b\xb5\x56\x3b\xe4\xcb\x85\xc8\x74\x55\xb7\xc8\x35\x48\x9e\xc7\x81\x45\x81\x82\xfe\x3b\xba\x24\xa3\x3a\xbe\x22\xff\x53\x62\x56\x94\xc5\xb9\xf3\x0c\x01\xfa\x41\x72\x49\x3f\xe9\x32\x63\x3d\x7a\x24\x2f\xf8\x13\x97\x81\x2a\x45\x7c\x99\x2a\x49\xde\x76\xa9\xa2\xd4\x90\x8c\xfc\xa3\x0f\xcc\x47\x0f\xc0\x42\x35\xb9\x3c\xad\x31\xdc\x5e\xa6\xf3\x31\xdd\x3a\xd3\x3e\x49\x0f\x93\x78\xba\x7b\x8c\x2b\x13\x13\x42\xdd\x1e\x43\xdb\xfb\x4a\x73\xbd\xa2\xf1\x75\x48\x1a\x07\x39\x1f\x37\x06\xae\x16\x37\x09\x57\x61\xb8\xd9\x44\x10\x99\x35\xd8\x6c\xb8\xf5\x3e\x92\xb0\xdd\xae\x11\x6b\xed\x44\x96\x5d\xc9\x78\x2e\x3f\xa1\xb2\x0d\x72\x87\xef\x2b\x3e\xbf\x36\x1b\x3b\xe2\xf0\x9e\x9b\x47\x38\xff\x7a\xc7\xfb\x7f\xb1\xd1\x2b\x7f\x7a\x42\xb4\x66\x24\x6b\xa2\xc8\x52\x14\xc9\x5f\x69\x49\x1f\x01\x00\x00\xff\xff\x0e\x6a\x41\x08\x99\x02\x00\x00")

func include_fn_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_fn_bash,
		"include/fn.bash",
	)
}

func include_fn_bash() (*asset, error) {
	bytes, err := include_fn_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/fn.bash", size: 665, mode: os.FileMode(420), modTime: time.Unix(1422823345, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_gun_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x53\xdf\x6b\xdb\x30\x10\x7e\xb6\xfe\x8a\xab\xf0\xda\xad\xa0\x85\xbd\x6e\x34\xac\x2c\xe9\x08\x64\x4d\xf1\x92\xed\xa1\x74\xc1\x58\xb2\x2d\xa6\x48\xc6\x3f\xd2\x42\xc8\xff\xbe\x93\x2c\xc7\x76\x96\x87\x20\xe7\xbe\xfb\xee\xee\xbb\x1f\x84\x8b\x44\xc5\xa5\x80\xef\x9b\xc7\xed\x8f\xd5\x6c\xb3\x9c\x6f\x67\x8b\xe8\x8e\x86\x87\xb1\xe5\x33\x4b\x76\xbc\x3a\xd2\x11\x21\x5a\xad\xd6\x84\x64\x8d\x66\x52\xcb\xfa\xfd\x07\x38\x90\x60\xf7\x97\xcb\x12\x3e\xa2\x91\x04\x32\x85\xe7\x67\x60\x29\xfe\x95\xb5\xcc\xb4\x41\xde\xcb\xcb\x17\xa8\x73\x81\xa8\x85\xaf\x20\x2b\x45\x01\x37\x7f\x2c\x21\xbc\x19\x3a\x4e\x61\xc2\xc5\x7e\xa2\x1b\xa5\x4e\x8c\x40\x24\xb9\x01\x6a\x9d\x29\x4c\xa7\x03\x77\x04\x53\x49\xec\xef\xd8\x56\xb4\x17\x65\x25\x8d\x6e\x8b\x6a\x69\x99\x92\x5c\x94\x08\x42\x68\xab\xff\x35\x8f\x7e\x2e\x56\x8f\xb4\x63\xa4\x52\x73\x56\x1a\xe3\x85\x28\x93\xc4\x0a\x8a\xb8\xce\xb1\x1b\x4f\xbf\x67\x94\x00\x04\xaf\xb9\x54\xc2\x8a\xa2\xa1\x45\x28\x5c\xdd\x01\xa5\x70\x7d\x8d\x4a\x18\xf7\xd6\x49\x5b\x9f\x55\xca\x0d\xb2\x90\xe7\xc3\x1c\xec\xfb\x6e\x72\x7b\x74\xc1\xb8\xd1\xc2\xbe\xbe\x4d\x17\xe8\x4e\x36\x7a\x04\x5d\xb7\xef\x7c\x5e\x67\x4c\x2c\xa3\x43\x9c\xa9\x97\xaf\x4c\xcc\x59\x51\x9a\x14\xeb\x6d\xf5\x9c\x86\xe1\xda\xb7\x0d\x3f\xd1\xe1\x2c\x2a\xd3\x94\x89\xe8\x31\x6b\xca\x65\x5a\x63\xef\x54\x25\xda\x61\x39\xd9\x36\xdf\x6c\xfe\x70\xbf\x59\xae\xb7\x4f\xd1\xea\x61\xb1\x9c\x3b\xfd\x7d\xe0\x8b\x1e\x83\x54\x67\xb9\x2e\xb9\xf7\xa3\xbe\x85\x4d\x25\x75\x06\x5c\xa4\x71\xa3\x6a\xf0\x92\xe0\x72\x96\xd1\x16\xec\x62\xe9\xc7\x5f\x89\x1a\x98\x30\x50\xc8\x02\xc3\x48\xdc\x27\x27\x65\x1d\xdd\x7f\x73\xa5\xd9\xfa\x9d\xcf\x1b\x09\x46\x9b\x10\x90\x80\x8c\x94\xbb\x4e\x0f\xc5\x70\x51\x54\x6e\xfb\xf1\xfb\xbc\xef\xa7\xae\xb1\x6e\x50\xfd\x3d\x8d\x3b\xb2\x33\xbc\x51\xa2\x25\xdb\xf3\xf9\xcf\xbb\x17\x46\x02\x3c\x44\x26\xde\x0a\x53\xd6\xd0\x9d\x1e\xb4\x15\x9c\x21\xfe\x04\xc0\xbf\x23\x5c\xe8\x3d\xab\x72\xf3\x6a\x3f\x46\x40\xaa\x19\xee\xbd\xc2\xd7\xa7\xd2\x95\xdd\x70\x1a\x7e\xc5\x43\xf9\x17\x00\x00\xff\xff\x87\x56\xdd\x45\x2f\x04\x00\x00")

func include_gun_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_gun_bash,
		"include/gun.bash",
	)
}

func include_gun_bash() (*asset, error) {
	bytes, err := include_gun_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/gun.bash", size: 1071, mode: os.FileMode(420), modTime: time.Unix(1423069763, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_module_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8d\xc1\x0a\x83\x30\x0c\x86\xcf\xcd\x53\x04\x11\xd4\x81\x93\x9d\x65\x7b\x94\x41\x67\xd2\x19\xa8\xad\x54\xdd\x65\xf8\xee\x8b\xb0\x41\x77\xfd\xf2\xe7\xfb\x60\x8a\xb4\x79\x6e\x7d\xb4\x54\x37\xf8\x06\x43\x3c\x78\x9b\x18\x9d\x78\x0e\x76\xe2\x6b\x51\x5e\x0a\x30\x4b\xdc\xd2\xc0\x58\x94\x3f\xae\x4c\x1c\x3e\x13\xcf\x58\xdd\x25\xc8\x5a\x37\x55\x7e\xc6\x1b\x76\xc4\xaf\x2e\x6c\xde\xf7\xb8\x8e\x1c\xc0\x98\x63\x07\xc6\x09\xec\x90\x97\x5b\x92\xf4\x5f\x57\xf0\x0d\xbb\x98\x70\xb6\xeb\x88\x12\xb0\x54\xdc\x9d\xce\x0f\xbb\x8c\x3d\x52\x54\x61\x26\xd1\xf8\xb1\xd3\x17\x8a\x81\x61\xff\x04\x00\x00\xff\xff\x56\xa2\x96\xc8\xdb\x00\x00\x00")

func include_module_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_module_bash,
		"include/module.bash",
	)
}

func include_module_bash() (*asset, error) {
	bytes, err := include_module_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/module.bash", size: 219, mode: os.FileMode(420), modTime: time.Unix(1422823350, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"include/cmd.bash": include_cmd_bash,
	"include/deps.bash": include_deps_bash,
	"include/env.bash": include_env_bash,
	"include/fn.bash": include_fn_bash,
	"include/gun.bash": include_gun_bash,
	"include/module.bash": include_module_bash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"include": &_bintree_t{nil, map[string]*_bintree_t{
		"cmd.bash": &_bintree_t{include_cmd_bash, map[string]*_bintree_t{
		}},
		"deps.bash": &_bintree_t{include_deps_bash, map[string]*_bintree_t{
		}},
		"env.bash": &_bintree_t{include_env_bash, map[string]*_bintree_t{
		}},
		"fn.bash": &_bintree_t{include_fn_bash, map[string]*_bintree_t{
		}},
		"gun.bash": &_bintree_t{include_gun_bash, map[string]*_bintree_t{
		}},
		"module.bash": &_bintree_t{include_module_bash, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

