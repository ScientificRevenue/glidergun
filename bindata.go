package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _include_cmd_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xc1\x6e\xdb\x30\x0c\x3d\x5b\x5f\xc1\xa9\x6a\xd1\x1e\x0c\x2f\xc1\x4e\x2e\x32\xb4\xd8\x76\xdb\x76\xe9\xb1\x4e\x01\xd5\x96\x6b\x23\x8a\x1c\x58\x4e\xda\x21\xf5\xbf\x8f\x94\x25\xd7\x6e\xb3\xcb\x2e\x71\x44\x52\x7c\xe4\xe3\xa3\xce\xe0\x16\x74\xfd\x54\x75\xcf\x8a\x7e\xc1\xee\x1f\xf3\x66\xbb\x95\xa6\x80\xb2\x95\x5b\xf5\xdc\xb4\x1b\xc6\x0a\x95\x6b\xd9\x2a\x88\x6f\xe1\xdb\xaf\xef\x77\x8c\xe5\xdb\x22\xd6\xb5\xed\x2e\xaf\xe0\xc8\xa2\xe0\x2e\x94\xcd\x57\xfc\x27\xda\x2d\xc8\x83\xac\xb5\x7c\xd4\x0a\x7c\x3e\xcb\xdf\x02\x8d\x5d\x71\xb1\x40\x43\xc8\x13\x6f\xd4\x1f\x0b\x5c\x18\xcb\xe1\x15\xac\x2a\x80\xdb\x04\x4f\x69\x92\x70\xd6\xbf\xe1\xb9\xb8\x39\xe8\x98\xab\x6c\x5a\xd8\x40\x6d\x30\xcd\xf1\x13\x95\x79\x7f\xb3\xee\xf9\x35\x14\x0d\x8b\x22\x95\x57\x0d\x3a\x36\x54\x44\x63\x14\x82\x3c\xb5\x6a\x07\xfc\x81\x40\x1c\x66\xd3\x76\x33\x24\xe3\x71\xfe\x27\x6d\x7c\x80\xf4\x5d\x4e\xf5\xb2\xc3\xd3\x29\xbe\x7e\x38\x0f\x32\x06\xe5\xde\xe4\x5d\xdd\x18\x90\x74\xf2\xbc\x4d\x68\x2b\x8d\x6b\x15\xdd\xf8\x3d\x2e\xd3\x58\x2c\x7a\x74\xeb\x26\x97\xda\xf1\xe0\x59\x30\x54\xae\xb8\x9c\xb4\x72\x35\xaf\xb7\x34\x7c\xca\x40\xcc\xe1\xe2\x2b\x24\x85\x3a\x24\x66\xaf\x35\x5c\x5c\x0c\xac\x1a\xdf\x16\x8b\x5c\xdf\x34\x9e\x54\x1c\xa5\x4d\xce\xf0\x5f\x9c\xf4\x7c\xbd\x72\xb9\xe6\x3d\x8e\xcc\xbd\x9b\x90\x6f\x57\x2c\x31\xab\x3a\x60\xc5\x68\xa4\x40\xc0\xba\x66\x8c\x64\x5c\xd0\x37\xc3\x38\x27\x10\x63\x41\x2c\x20\xe3\x99\xb8\xc9\x90\x78\x16\xf5\x5e\x39\x03\x1e\x0c\xe3\xf7\x25\x2e\x5c\x51\x8b\xb1\xa6\x50\xcc\x1b\x49\xe8\xbc\x06\x5b\xd5\x65\x07\xc1\x8c\x81\x33\xfb\xeb\x2b\x74\xed\x5e\x05\xb7\xed\x64\xb7\xb7\xab\xcf\x2c\xaa\x4b\x08\xac\x8e\x6a\x75\x34\x3e\x08\xb4\x67\x62\xc6\xe3\x35\x74\x95\x32\xd8\x84\x38\x4e\xf8\xc3\x38\xbe\xee\xf1\xf6\x0d\xf1\xa0\x2d\xa2\x50\xda\xfb\x7b\x34\x91\x0f\xd6\xeb\xf1\xa2\x9f\xd7\xef\x06\xf7\x32\xaf\x82\x22\x52\x70\x81\xe4\xf7\x95\x2d\x69\xb4\x3a\x64\xa1\xb2\x3e\x26\x11\x97\xa5\x89\x89\xd7\x21\xe2\x8a\xee\x97\xb5\xd7\xc4\x28\x8d\xdb\x0f\x6b\x9b\xba\x40\x54\x15\x62\xce\x75\xe5\x13\x79\x69\x45\xbb\xb6\x36\x5d\x09\x1c\xe0\x3c\x5e\x7e\xb1\x70\x6e\x33\x94\x99\x6f\x6a\x06\xff\x91\x8e\xa1\x1c\x07\x43\x2f\xd0\x09\x24\x8a\x1b\xa1\x26\x58\xef\xd1\x86\xeb\xff\x00\x44\x4f\x1a\x22\x46\xd0\x41\xe1\xe1\x13\xd8\x78\xa9\x3b\x10\x03\xbd\x8c\x78\xf2\x72\xaa\x94\xde\x9d\x5a\xe2\xbb\xaa\x79\xb6\x40\x5e\xac\x1c\xdb\xd8\x4a\xb7\xc8\xd4\xd0\xa9\x4d\x96\xed\x13\x29\x91\x24\x10\xa6\x46\xa6\xc9\xdc\xa8\xb3\x40\x3b\xb5\xed\x04\x49\x7f\xf0\x95\x39\x03\x2d\x91\x14\xbc\x31\x84\x4d\xb4\x7d\xa4\x34\xc9\x39\x75\x9a\xd0\x2b\x35\x18\x0d\x9a\x60\x7e\x86\x24\xc6\x35\x9a\x5c\x77\x8f\xcb\x89\xc9\xf8\x4a\x4c\x4c\x7d\xf9\xb7\x63\x31\x2a\xd7\xef\xa7\x7b\x79\x88\xa4\xc9\x5a\x06\xba\x1c\x2b\xec\x6f\x00\x00\x00\xff\xff\x30\x4f\x27\x2e\x69\x06\x00\x00")

func include_cmd_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_cmd_bash,
		"include/cmd.bash",
	)
}

func include_cmd_bash() (*asset, error) {
	bytes, err := include_cmd_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/cmd.bash", size: 1641, mode: os.FileMode(420), modTime: time.Unix(1422823337, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_deps_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\x5b\x6f\xdb\x36\x14\xc7\x9f\xa5\x4f\x71\x42\x1b\x6d\x14\x54\x12\x96\x5d\x1e\x94\xb8\xc3\x80\xa4\x5b\x5f\xe6\x20\xc9\x80\x01\x45\x1b\x30\x14\x25\x13\x11\x29\x8d\xa4\x3c\x37\x75\xbe\xfb\x0e\x29\x4a\xb1\xbd\x36\x40\x9f\xc4\xcb\xb9\xfc\xcf\x39\x3f\x71\x06\x37\x42\x76\x0d\x87\x7b\xa1\xa8\xfe\x0c\x25\xef\xb8\x2a\xb9\x62\x9f\x41\x52\x45\x6b\x2e\xb9\xb2\x71\x5c\x72\xd6\x50\xcd\xe1\xe2\xf2\xea\xe6\xee\xfa\xf2\x6a\xb9\x20\xf3\x2f\xd3\xa6\x48\x57\xd6\x76\xa6\xc8\x73\x4d\xff\xcd\x6a\x61\x57\xfd\x7d\x6f\xb8\x66\xad\xb2\xe8\x9e\xb1\x56\xe6\x75\x23\x4a\xae\x1b\x7a\x6f\xc2\xb2\xee\x55\xaa\x29\x7b\xc8\x25\x35\x96\xeb\x5c\x60\xda\xcd\x13\x71\xb9\x3a\x93\x0a\x25\xec\x71\x02\x5f\xe2\x88\x6f\xba\x56\x5b\xb8\xfa\xed\xf6\x0f\x4c\x7a\xec\x6f\x4b\xa1\x93\x1c\x15\x17\x73\x77\x4c\xe2\xa7\xe0\x85\xe7\xc1\x89\xad\x5a\x40\x89\xbf\xff\xf5\xe7\xdd\xf5\x72\x79\x5b\xfc\xfa\x94\x67\x98\x91\xc0\x0c\x56\x52\xbe\x81\x49\x03\x98\x8e\x33\x51\x09\x96\x65\xd9\x14\x47\xf3\x7f\x7a\xa1\xf9\x10\x6b\xac\x5d\x51\xc9\x51\xc1\x0f\x04\xd6\x5c\x1b\xd1\x2a\xd7\x83\xd3\x22\x6d\xa8\xe5\xc6\xa2\xf2\xc8\xfb\xb2\x15\x67\x0f\x98\xdb\x99\x13\xfc\x06\x63\x02\xaf\x5e\x81\xe6\xb6\xd7\x6a\x94\x77\x02\x17\xcf\xdd\x0e\x29\xcb\x37\x20\x94\xb1\xb4\x69\x84\xaa\xc1\x07\x81\x31\x04\xa0\xc4\x31\x4b\x30\xfa\x4a\x9e\xa9\x08\x2f\xe4\x7b\x4b\xf8\xf0\x01\xd2\x0a\x0e\xfb\x9c\x87\x2c\x1f\x3f\x4e\xd1\x83\x80\xef\x8d\xdf\xb4\x8c\x36\x60\x69\x0d\x7e\xde\x60\x65\x57\x09\xc4\x0f\x63\x82\x5b\xf8\x82\xf9\x06\xb1\xf1\x15\x87\x2c\x71\x24\x1f\x50\x0b\xa4\xdd\xff\xa4\x61\x4c\x1f\x69\x31\x3f\x66\xbd\x6e\x20\x35\x68\x32\x91\x19\x84\x27\x71\x84\x29\x1d\x3e\xbd\x4f\x90\x9a\x64\x5a\x4a\xd8\x42\xad\x31\x3d\x7a\xfe\xf2\x13\xbc\x85\xbc\xe4\xeb\x5c\xf5\xd8\x5c\x9c\x98\x9f\x14\x1e\x6f\xb7\xc3\xf2\xc7\xd3\xc4\x65\xac\xe0\xc8\x49\x76\x11\x03\x6a\x5e\x04\x99\x62\x09\x48\x39\x90\x4f\xd3\xe8\xe6\xae\x64\x72\x70\x78\x02\x24\x21\x67\x60\x57\x1c\x99\x08\x50\x1c\x1d\xed\x52\xa1\x5a\x8b\x3d\x18\x7a\x55\x1c\xe0\x40\x9c\xcf\x46\x58\x38\x8d\xa3\x4a\xc4\xd1\xfb\x77\x37\x8b\xd7\xf0\x1a\x49\xa2\x25\xac\xc1\x82\x6b\x87\x87\xc0\xf4\x12\xce\xcf\xcf\x51\x25\x6a\x46\xb7\xd0\xf4\x05\xc9\x71\x35\xce\x76\x06\xb7\xcb\x8b\x65\xe1\xdc\x71\x40\x5c\x0e\xf3\x88\xa3\xb1\xab\x73\xf7\x7d\x8b\x31\x82\xf7\xd8\x06\x24\x06\xbb\xc0\xa8\xdd\xb9\xc2\x36\xc8\xf2\xe7\x84\xc0\x02\x0f\x47\x09\x0e\x9f\x17\x8b\x9d\xb4\x56\x14\x83\x94\x87\xf5\xc2\x73\xa4\x83\xca\x59\x09\xae\x92\xa9\x04\xdc\xdb\xf6\xb9\x90\x01\x30\xa1\x9d\xf1\x40\x98\x9b\xdb\x3d\x35\x03\x6d\xc4\x55\x46\xdc\x58\x27\xee\x1c\xb6\xa3\xed\x6c\x76\x92\x39\x72\x19\xda\xa3\xed\x64\x43\x70\x2a\xa8\xe3\x51\x74\x09\xf4\x0a\x3f\xbb\xf5\xef\x50\x74\x76\x86\x56\xb6\x7e\xdc\x5a\xaa\xb3\xfa\x31\x41\xf8\x11\xe4\xc7\x4d\xf5\x82\x3d\x37\x94\x39\xae\x3d\xfc\xdf\x84\x8c\x7c\x9a\x8d\x3f\x48\x81\x6c\x21\xa2\x56\xf7\x3c\xf0\xe9\xc7\x12\x6e\xf7\x3a\xef\x31\x29\x02\x26\x77\x60\x98\x16\x9d\x0d\x78\x8c\xf6\xbe\xbf\xc3\xb3\x7b\x7d\xf9\xee\xfd\xdf\x7b\x0f\xaf\xbf\x5d\x53\xf7\xf6\x0c\xce\x7b\xf2\xf1\xb2\x57\x86\x8f\x9e\xb8\xd5\x12\x52\x5d\xed\x81\xc3\x1b\x83\x64\x45\x72\xbd\xdb\x83\xaf\xfc\xd9\x61\xb8\xe9\x7e\x82\x17\x9f\x59\x7c\xa0\xfe\x0b\x00\x00\xff\xff\xa9\x96\xc4\x90\xd4\x06\x00\x00")

func include_deps_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_deps_bash,
		"include/deps.bash",
	)
}

func include_deps_bash() (*asset, error) {
	bytes, err := include_deps_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/deps.bash", size: 1748, mode: os.FileMode(420), modTime: time.Unix(1422855677, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_env_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\x4a\x49\x4d\xce\x49\x2c\x4a\x55\xd0\x4d\x54\x88\x4f\xcd\x2b\xe3\xe2\x02\x12\xba\xa9\x15\x05\xf9\x45\x25\x1a\x9a\x0a\xd5\x5c\x9c\x30\x05\x65\x89\x45\xb6\x4a\x2a\x86\x4a\x5c\x9c\x20\x75\xda\xb6\x1a\x2a\x40\x11\x4d\xae\x5a\x88\x8e\xe2\x8c\xfc\x72\x88\xfa\xb4\xfc\x22\x90\x5a\x85\xcc\x3c\x05\x25\x95\x6a\x90\xda\x68\x87\xd8\x5a\x25\x6b\x85\x94\x7c\x2e\x4e\xce\xd4\xe4\x8c\x7c\xa0\x38\xc8\x30\x95\x6a\x45\x20\x55\x0b\x34\x30\x25\x3f\x2f\x95\xab\x16\x10\x00\x00\xff\xff\xfd\x25\x23\x79\x8b\x00\x00\x00")

func include_env_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_env_bash,
		"include/env.bash",
	)
}

func include_env_bash() (*asset, error) {
	bytes, err := include_env_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/env.bash", size: 139, mode: os.FileMode(420), modTime: time.Unix(1422810093, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_fn_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x41\x8f\xda\x30\x10\x85\xcf\xf1\xaf\x78\x9a\x5a\x02\x54\x45\x11\x5c\x69\xaa\xaa\x87\x4a\xbd\xf6\x4a\x39\x78\x83\x4d\xac\xcd\x3a\x91\xed\x80\x10\xcb\x7f\xdf\x71\xc8\x42\x0e\x08\xad\x72\xc9\xf8\xbd\x99\xe7\xcf\xf3\x0d\xbf\x55\xa8\x61\x7a\x57\x45\xdb\x3a\x58\x17\x7d\x1b\x3a\x3d\x54\x42\x18\x97\x2b\xbf\x0f\xf3\x05\xce\x22\xdb\xe9\xaa\x51\x5e\x63\xa7\x43\x55\xd2\x5f\x37\xd8\xa0\x6e\xcd\xb3\x00\x36\xf7\x6f\xda\xc5\x40\x22\x6b\xda\x4a\x35\xe9\xa4\xb1\x4e\x97\x72\x1e\x4f\x9d\x86\x5c\xe2\x1d\x7b\xaf\x3b\x7c\x4e\x1b\xcb\xfc\x00\x9a\x06\x10\x0b\xb5\x56\x3b\xe4\xcb\x85\xc8\x74\x55\xb7\xc8\x35\x48\x9e\xc7\x81\x45\x81\x82\xfe\x3b\xba\x24\xa3\x3a\xbe\x22\xff\x53\x62\x56\x94\xc5\xb9\xf3\x0c\x01\xfa\x41\x72\x49\x3f\xe9\x32\x63\x3d\x7a\x24\x2f\xf8\x13\x97\x81\x2a\x45\x7c\x99\x2a\x49\xde\x76\xa9\xa2\xd4\x90\x8c\xfc\xa3\x0f\xcc\x47\x0f\xc0\x42\x35\xb9\x3c\xad\x31\xdc\x5e\xa6\xf3\x31\xdd\x3a\xd3\x3e\x49\x0f\x93\x78\xba\x7b\x8c\x2b\x13\x13\x42\xdd\x1e\x43\xdb\xfb\x4a\x73\xbd\xa2\xf1\x75\x48\x1a\x07\x39\x1f\x37\x06\xae\x16\x37\x09\x57\x61\xb8\xd9\x44\x10\x99\x35\xd8\x6c\xb8\xf5\x3e\x92\xb0\xdd\xae\x11\x6b\xed\x44\x96\x5d\xc9\x78\x2e\x3f\xa1\xb2\x0d\x72\x87\xef\x2b\x3e\xbf\x36\x1b\x3b\xe2\xf0\x9e\x9b\x47\x38\xff\x7a\xc7\xfb\x7f\xb1\xd1\x2b\x7f\x7a\x42\xb4\x66\x24\x6b\xa2\xc8\x52\x14\xc9\x5f\x69\x49\x1f\x01\x00\x00\xff\xff\x0e\x6a\x41\x08\x99\x02\x00\x00")

func include_fn_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_fn_bash,
		"include/fn.bash",
	)
}

func include_fn_bash() (*asset, error) {
	bytes, err := include_fn_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/fn.bash", size: 665, mode: os.FileMode(420), modTime: time.Unix(1422823345, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_gun_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x53\x41\x6f\xdb\x3c\x0c\x3d\x4b\xbf\x82\xd5\xe7\xaf\xd8\x0a\x68\xc5\xae\x2d\x02\xac\x98\xd3\x21\x40\x56\x17\x5e\xb2\x1d\x8a\x22\x30\x2c\x39\x16\xa6\x48\x86\xa5\xb4\x01\x82\xfc\xf7\x51\xb6\xbc\xc4\x59\x4e\xb4\x49\x3e\x3e\x3e\x8a\xa4\x42\x96\xba\x68\x25\x7c\x5b\x3e\xad\xbe\x67\xe9\x72\x3e\x5d\xa5\xb3\x7c\xc2\x92\xfd\xd8\x73\xc7\xcb\x8d\x70\x07\x36\x02\xe4\x59\xb6\xa0\x74\xbd\x35\x5c\x19\xe5\x3f\x7c\x84\x3d\x25\x9b\xdf\x42\xb5\xf0\x09\x9d\x94\xfc\x07\x8b\x2c\xcd\xee\xa0\x10\x02\xbc\x45\xa7\xf2\x6a\x6d\x2c\xa2\x55\x05\x72\xa7\x9c\x77\x50\x18\x01\xc6\x7a\x50\x06\x94\xa7\x87\xbe\xdc\x9b\x6c\x9d\xb2\xa6\xaf\x28\xcb\xda\x02\x5b\x6b\x25\x64\x8b\x41\x48\x02\xf5\xcf\x69\xfe\x63\x96\x3d\xb1\x01\x51\x29\x23\x78\x6b\x6d\xec\x42\xdb\xb2\xd0\xd0\x14\xbe\x46\x29\xcf\xbf\x52\x46\x01\xc8\x7b\xad\xb4\x84\x97\x17\x60\x49\x88\x30\xb8\x9a\x00\x63\x70\x7d\x0d\x57\xc0\x45\xf4\xde\x86\xd6\x19\xbc\xbe\xde\x83\xb0\x88\x42\x5c\x2c\xb3\x0f\xf6\xff\xdb\x9b\x43\x57\x4c\x58\x23\x83\x45\x25\x58\xf1\x12\xdc\xd7\xd2\x84\x0c\x32\x8c\x6a\x12\x79\x3b\x67\x19\x10\x43\xa4\x73\x55\x6a\x10\xa3\x6d\x21\x78\xd3\xda\x0a\xfb\xed\xf5\x44\x96\x0a\x58\xa8\xbf\x4a\x3e\x9f\x50\x10\xe2\xec\xb6\x2d\xe5\x31\x16\x5c\xb5\xaa\x3c\xce\x4e\x3b\x89\x7f\x3d\xbc\xe7\x4b\xa7\x8f\x0f\xcb\xf9\x62\xf5\x9c\x67\x8f\xb3\xf9\xb4\xd3\x7f\x2c\x7c\x31\xe3\x84\xea\x8c\xeb\x52\x7a\xc8\xea\xdf\xec\x06\x96\x4e\x99\x35\x08\x59\x15\x5b\xed\x21\x4a\x82\xcb\x2c\x88\xc3\x11\xc4\x31\x6c\x0a\x15\x9f\xdf\x49\x0f\x5c\x5a\x68\x54\x83\x65\x94\xbe\xef\xa5\x2c\xf2\x87\xaf\x5d\x6b\xa1\xff\x2e\x67\x47\xc9\x68\x13\x08\x25\x74\xa4\xbc\x9b\xf4\xa9\x18\x21\x1b\xd7\xad\x2e\x7e\x9f\xcf\xfd\xef\xd4\xf8\xf0\x50\xc7\x63\x18\x4f\x64\x63\xc5\x56\xcb\x1e\x1c\x76\xff\x9f\xec\xa3\x30\x4a\xf0\x8a\xb8\xdc\x35\xb6\xf5\x30\xdc\x0d\xf4\x1d\x9c\x45\xe2\x09\x40\xb4\xa3\xb8\x34\x6f\xdc\xd5\xf6\x3d\x7c\x8c\x02\x95\xe1\xb8\xf7\x1a\x6d\xa4\x32\x2e\x6c\x38\x4b\xbe\xe0\xa1\xfc\x09\x00\x00\xff\xff\x8f\xb3\x91\x55\xec\x03\x00\x00")

func include_gun_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_gun_bash,
		"include/gun.bash",
	)
}

func include_gun_bash() (*asset, error) {
	bytes, err := include_gun_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/gun.bash", size: 1004, mode: os.FileMode(420), modTime: time.Unix(1422824100, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_module_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8d\xc1\x0a\x83\x30\x0c\x86\xcf\xcd\x53\x04\x11\xd4\x81\x93\x9d\x65\x7b\x94\x41\x67\xd2\x19\xa8\xad\x54\xdd\x65\xf8\xee\x8b\xb0\x41\x77\xfd\xf2\xe7\xfb\x60\x8a\xb4\x79\x6e\x7d\xb4\x54\x37\xf8\x06\x43\x3c\x78\x9b\x18\x9d\x78\x0e\x76\xe2\x6b\x51\x5e\x0a\x30\x4b\xdc\xd2\xc0\x58\x94\x3f\xae\x4c\x1c\x3e\x13\xcf\x58\xdd\x25\xc8\x5a\x37\x55\x7e\xc6\x1b\x76\xc4\xaf\x2e\x6c\xde\xf7\xb8\x8e\x1c\xc0\x98\x63\x07\xc6\x09\xec\x90\x97\x5b\x92\xf4\x5f\x57\xf0\x0d\xbb\x98\x70\xb6\xeb\x88\x12\xb0\x54\xdc\x9d\xce\x0f\xbb\x8c\x3d\x52\x54\x61\x26\xd1\xf8\xb1\xd3\x17\x8a\x81\x61\xff\x04\x00\x00\xff\xff\x56\xa2\x96\xc8\xdb\x00\x00\x00")

func include_module_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_module_bash,
		"include/module.bash",
	)
}

func include_module_bash() (*asset, error) {
	bytes, err := include_module_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/module.bash", size: 219, mode: os.FileMode(420), modTime: time.Unix(1422823350, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"include/cmd.bash": include_cmd_bash,
	"include/deps.bash": include_deps_bash,
	"include/env.bash": include_env_bash,
	"include/fn.bash": include_fn_bash,
	"include/gun.bash": include_gun_bash,
	"include/module.bash": include_module_bash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"include": &_bintree_t{nil, map[string]*_bintree_t{
		"cmd.bash": &_bintree_t{include_cmd_bash, map[string]*_bintree_t{
		}},
		"deps.bash": &_bintree_t{include_deps_bash, map[string]*_bintree_t{
		}},
		"env.bash": &_bintree_t{include_env_bash, map[string]*_bintree_t{
		}},
		"fn.bash": &_bintree_t{include_fn_bash, map[string]*_bintree_t{
		}},
		"gun.bash": &_bintree_t{include_gun_bash, map[string]*_bintree_t{
		}},
		"module.bash": &_bintree_t{include_module_bash, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

